from xbmctorrent import plugin
from xbmctorrent.scrapers import scraper
from xbmctorrent.ga import tracked
from xbmctorrent.caching import cached_route
from xbmctorrent.utils import ensure_fanart
from xbmctorrent.library import library_context


BASE_URL = "%s/" % plugin.get_setting("base_ilcorsaronero")
HEADERS = {
    "Referer": BASE_URL,
}

CATEGORIES = [
    ("DVDRip", 1),
    ("Screener", 19),
    ("TV shows", 15),
    ("Anime", 5),
]

# Cache TTLs
DEFAULT_TTL = 24 * 3600 # 24 hours


@scraper("IlCorsaronero.info", "%s/images/h_logo.gif" % BASE_URL)
@plugin.route("/ilcorsaronero")
@ensure_fanart
@tracked
def ilcorsaronero_index():
    yield {"label": "Search", "path": plugin.url_for("ilcorsaronero_search")}

    def make_cats(root, prefix=""):
        for cat in root:
            yield {
                "label": "%s%s" % (prefix, cat[0]),
                "path": plugin.url_for("ilcorsaronero_page", root="/categoria.php?category=%d" % cat[1], page=0),
            }
            if len(cat) > 2:
                for entry in make_cats(cat[2], prefix="%s    " % prefix):
                    yield entry

    for cat in make_cats(CATEGORIES):
        yield cat


@plugin.route("/ilcorsaronero/page/<root>/<page>")
@library_context
@ensure_fanart
@tracked
def ilcorsaronero_page(root, page):
    from bs4 import BeautifulSoup
    from urlparse import urljoin
    from xbmctorrent.utils import url_get

    page = int(page)
    html_data = url_get(urljoin(BASE_URL, "%s&page=%d" % (root, page)), headers=HEADERS)
    soup = BeautifulSoup(html_data, "html5lib")
    nodes = soup.findAll("a", class_="tab")

    for node in nodes:
        size, null, data, seeds, peers = map(lambda x: (x.font.text if x.font is not None else None), node.parent.parent.findAll("td")[-5:])
        text = "%s (%s S:%s P:%s %s)" % (node.text, size, seeds, peers, data)

        yield {
            "label": text,
            "path": plugin.url_for("ilcorsaronero_play", uri=node["href"]),
            "is_playable": True,
        }

    if root.find('search') == -1:
        yield {
            "label": ">> Next page",
            "path": plugin.url_for("ilcorsaronero_page", root=root, page=page + 1),
            "is_playable": False,
        }


@plugin.route("/ilcorsaronero/search")
@tracked
def ilcorsaronero_search():
    import urllib

    query = plugin.request.args.get("query")
    if query:
        query = query[0]
    else:
        query = plugin.keyboard("", "XBMCtorrent - ilCorsaronero - Search")
    if query:
        plugin.redirect(plugin.url_for("ilcorsaronero_page", root="/argh.php?search=%s" % urllib.quote(query, safe=""), page=0))


@plugin.route("/ilcorsaronero/play/<uri>")
@tracked
def ilcorsaronero_play(uri):
    import re
    from bs4 import BeautifulSoup
    from xbmctorrent.utils import url_get

    html_data = url_get(uri, headers=HEADERS)
    soup = BeautifulSoup(html_data, "html5lib")
    magnet_node = soup.findAll("a", class_="forbtn", href=re.compile("magnet"))

    plugin.redirect(plugin.url_for("play", uri=magnet_node[0]["href"]))
